---
title: DSAN 5500 Final Project Job Position ETL Pipeline
subtitle: A DSAN 5500
author: Jen Guo and Wendy Hu
date: last-modified
date-format: long
format:
  html:
    toc: true
    code-copy: true
    code-overflow: wrap
    mainfont: Atkinson Hyperlegible
    code-annotations: hover
    code-fold: true
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
jupyter: python3
---

# Set Up API Key

```{python}
#load needed packages
import json
import os
import requests

#Obtain API key and app ID from the Adzuna site to extract job posts
#retrieve API key from stored json file
try:
    with open('Jen_api.json') as f:
        keys = json.load(f)
    
        #store API key and app_id
        APP_ID = keys['app_id']
        API_KEY = keys['api_key']
        
#handle errors if json file not found and if api key is not valid
except FileNotFoundError:
    print("The file storing api key was not found.")
except KeyError as e:
    print(f"Missing key in json file: {e}")
except json.JSONDecodeError:
    print("Error reading json file.")
```

# Extract Step

```{python}
#install needed packages
from pprint import pprint
from typing import List, Optional, Union
import string
from pydantic import BaseModel, field_validator, HttpUrl, ValidationError, FilePath

#define GetJobs class
class GetJobs(BaseModel):
  #intialize variables in GetJobs class types
  title: str
  company: str
  location: str
  salary: Optional[Union[int, float, str]]
  salary_min: int
  contract_time: str
  degree: str
  description: str
  about_url: HttpUrl

  #validator to clean the extracted salary to replace "$" and "," symbols to convert to integer
  @field_validator('salary')
  @classmethod
  def clean_salary(cls, value):
      #if the extracted salary is integer or float value then return the salary value
      if isinstance(value,(int, float)):
          return value
      #if the extracted salary is string type then remove the "$" and the "," symbols
      if isinstance(value, str):
          cleaned_sal = value.replace("$", "").replace(",", "").strip()
          #handle errors for string type extracted salary
          try:
              return int(float(cleaned_sal))
          except ValueError:
              return "Not specified"
          return "Not specified"
          
  #validator for salary_min so it's always a clean int format
  @field_validator('salary_min', mode='before')
  @classmethod
  def convert_salary_min(cls, value):
      if isinstance(value, float):
          return round(value) #return rounded conversion of salary min value
      return value
 
      
  #validator for extracted location to replace "," symbol
  @field_validator('location')
  @classmethod
  def clean_location(cls, value: str):
    return value.replace("“","").replace("”","")


#define API request parameters
params = {
    'app_id': APP_ID,                  # app ID
    'app_key': API_KEY,                # API key
    'what': 'data scientist',          # Job title or keywords
    'where': 'Washington, DC',         # Location
    'results_per_page': 1,             # Number of results per page
    'sort_by': 'date',                 # Sort by most recent
    'salary_min': 90000,               # Minimum salary to get results for
    'full_time': 1                     # Only return full-time job positions
}

#create extract_jobs function to extract job posts
def extract_jobs(job_url: HttpUrl) -> List[GetJobs]:
  response = requests.get(job_url, params=params) #request from the Adzuna job post page using the request library
  #print error message if could not fetch job posts from page
  if response.status_code != 200:
      raise Exception(f"Failed to fetch jobs: {response.status_code}")

  #get job posts in json format
  jobs_data = response.json()
  #initialize empty list to store extracted job posts
  extracted_jobs = []

  #for each of the extracted job posts
  for job in jobs_data.get("results", []):
      try:
          job_post = GetJobs( #call GetJobs class
              title = job.get("title", "No title"), #extract the job title of the job position post
              company = job.get("company", {}).get("display_name", "Unknown"), #extract the company name of the job position post
              location = job.get("location", {}).get("display_name", "Unknown"), #extract the job location of the job position post
              salary = job.get("salary", "Not specified"), #extract the job salary information of the job position post
              salary_min = round(job.get("salary_min", 0)), #extract the minimum salary for the job position
              contract_time = job.get("contract_time", "Unknown"), #extract employment hours from job position post
              degree = job.get("degree", "Unknown"), #extract the work hours ex. Full-time, part time for the job position post
              description = job.get("description", "")[:250], #extract the job description of the job post
              about_url = job.get("redirect_url")) #extract the url page of job post
          
          extracted_jobs.append(job_post) #add extracted job to list
      except ValidationError as e: #raise error if job wasn't able to get extracted
          print(f"Validation error: {e}")
          
  return extracted_jobs #return extracted job posts with the requested parameters
          

```

# Transformation Step

```{python}
#create function to transform extract job info into a friendly email structure
def transform_extracted_jobs(job_obj: List[GetJobs]) -> str:
    #if no job post extracted then return error message
    if not job_obj:
        return "No job posts found."

    #set text for email body
    email_body = "<h2 style='font-family: Arial;'>Your Daily Job Digest: Data Scientist roles in Washington, DC</h2><br>"

    #iterate over extracted job to be displayed in the following format
    for i, job in enumerate(job_obj, start=1):
        job_entry = (f"""
        <div style='font-family: Arial;'>             
            <p style='font-size:16px; font-weight:bold;'>Title {i}: {job.title}</p>  
            <p style='font-size:14px;'>Company: {job.company}</p>                    
            <p>Location: {job.location}</p>                   
            <p>Salary: {job.salary}</p>                  
            <p><strong>Minimum salary: </strong>{job.salary_min}</p>          
            <p>Employment type: {job.contract_time}</p>      
            <p>Degree requirement: {job.degree}</p>           
            <p>Description summary: {job.description}</p>    
            <p>More info url: {job.about_url})</p>          
        </div>
        """
        #updated font type to Arial
        #print job title, set font size and bold title
        #print company name
        #print location of company
        #print job salary
        #print job minimum salary
        #print job type in terms of full-time. part-time, internship
        #print education requirement for job post
        #print job description
        #print url of the job post
        
        )
        email_body += job_entry #append the job_entry to email_body
    return email_body #return the email_body
        
```

# Load Step

```{python}
#create function to load the extracted job posts in email format into a json file as test 
def load_jobs_to_file(job_str: str, load_filepath: str) -> None:
    with open(load_filepath, 'a') as file:
        file.write(job_str + '\n')

def load_jobs_as_json(job_list: List[GetJobs], filepath: str):
    with open(filepath, 'w') as f:
        json.dump([job.model_dump(mode="json") for job in job_list], f, indent=2)
```

```{python}
#create function to define url to extract job posts
# def scrape_job_draft1(
#     job_url: str = "https://api.adzuna.com/v1/api/jobs/us/search/1", #extract job posts from this Adzuna url
#     jobs_filename: str = "extracted_jobs.json" #load extracted data to json file with specified title
# ):
#   extracted_jobs = extract_jobs(job_url) #call the extract_jobs function

#   #add the transformatiom_extracted_jobs function step
#   email_template = transform_extracted_jobs(extracted_jobs)
#   #print out the email_friendly version of extracted jobs in email template
#   print(email_template)

#   #file_result = load_jobs_to_file(email_template, jobs_filename)
#   #return(file_result) #return extracted job posts in the json file output
#   load_jobs_to_file(email_template, jobs_filename)

# scrape_job() #call the scrape_job function
```

```{python}
#create function to define url to extract job posts
def scrape_job(
    job_url: str = "https://api.adzuna.com/v1/api/jobs/us/search/1", #extract job posts from this Adzuna url
    jobs_filename: str = "extracted_jobs_structured.json" #load extracted data to json file with specified title
):
    extracted_jobs = extract_jobs(job_url) #call the extract_jobs function
    
    # Save structured JSON
    load_jobs_as_json(extracted_jobs, jobs_filename)
    
    # Transform for email content
    email_template = transform_extracted_jobs(extracted_jobs)
    return email_template  # return text for the email

scrape_job() #call scrape_job function
```

```{python}
#import packages to sent out email
import smtplib
from email.message import EmailMessage

#create function to load extracted job posts to email
def send_email_smtp(subject: str, body: str, to_email: str,
                    from_email: str, app_password: str,
                    attachment_path: str = None):
    msg = EmailMessage()
    #msg.set_content(body)
    msg.set_content("Email contains HTML information")
    msg.add_alternative(body, subtype='html')
    msg['Subject'] = subject
    msg['From'] = from_email
    msg['To'] = to_email

    # Add attachment if provided
    if attachment_path:
        with open(attachment_path, 'rb') as f:
            file_data = f.read()
            file_name = os.path.basename(attachment_path)
        msg.add_attachment(file_data, maintype='application', subtype='json', filename=file_name)

    # Send
    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(from_email, app_password)
            smtp.send_message(msg)
            print("Email sent successfully!")
    except Exception as e:
        print(f"Failed to send email: {e}")
```

```{python}
from dotenv import load_dotenv
import os

load_dotenv(dotenv_path="./.env") #store app password in hidden file

app_password = os.getenv("GMAIL_APP_PASSWORD") #get app password stored in hidden file
#print("App password loaded:", app_password)
```

```{python}
#extract job post from Adzuna site
email_content = scrape_job(
    job_url="https://api.adzuna.com/v1/api/jobs/us/search/1",
    jobs_filename="extracted_jobs_structured.json"
)
#send out to email
send_email_smtp(
    subject="🧾 Your Daily Data Scientist Job Digest", #email subject line
    body=email_content, #email body
    #to_email="liwen881129@gmail.com",
    #from_email="wendy881129@gmail.com",
    to_email="yanni.guo888@gmail.com", #send to email
    from_email="jentestguo@gmail.com", #from email
    app_password=app_password, #specify app password
    attachment_path="extracted_jobs_structured.json" #add json file of extracted job posts as attachment to email
)

```